// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int     @id @default(autoincrement())
  email    String  @unique
  password String
  name     String
  avatar   String?

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  posts    Post[]
  likes    Like[]
  comments Comment[]
  invoices Invoice[]

  @@map("users")
}

model Post {
  id    Int     @id @default(autoincrement())
  text  String
  image String?

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Comment {
  id   Int    @id @default(autoincrement())
  text String

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("comments")
}

model Like {
  id Int @id @default(autoincrement())

  postId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([userId, postId])
  @@map("likes")
}

model Invoice {
  id         String  @id @default(uuid())
  externalId String?

  status      StatusInvoice @default(PENDING)
  amount      Int
  description String?
  paymentUrl  String?

  userId Int
  user   User @relation(fields: [userId], references: [id])

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@map("invoices")
}

enum StatusInvoice {
  PENDING
  PAID
  FAILED
}
